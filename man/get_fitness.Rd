% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_fitness.R
\name{get_fitness}
\alias{get_fitness}
\title{Compute fitness values}
\usage{
get_fitness(
  traits_comm,
  growth_rate = default_growth_rate(),
  competition_sd = default_competition_sd(),
  trait_opt = default_trait_opt(),
  carrying_cap_opt = default_carrying_cap_opt(),
  carrying_cap_sd = default_carrying_cap_sd(),
  fitness_func = fitness_func_ricker,
  brute_force_opt = "none"
)
}
\arguments{
\item{traits_comm}{numeric vector of variable length, the trait values of
every individual in the community.}

\item{growth_rate}{numeric \verb{>= 0}, the baseline growth rate. Generations
being discrete, high values will cause chaos.}

\item{competition_sd}{numeric \verb{>= 0}.Parameter \eqn{\sigma_{\alpha}} of
the competition coefficient. Modulates the the strength of competition
between two individuals given their distance in trait space.}

\item{trait_opt}{numeric. The optimal trait value, \eqn{z_{opt}}.
\code{get_carrying_cap(trait_opt) = carrying_cap_opt}.}

\item{carrying_cap_opt}{numeric, value of the carrying capacity at
\code{trait_opt}}

\item{carrying_cap_sd}{numeric \verb{>= 0}. Parameter \eqn{\sigma_K} of the
carrying capacity. Modulates how fast the carrying capacity decays when
moving away from the optimal trait value.}

\item{fitness_func}{the name of the function used to compute fitness.}

\item{brute_force_opt}{a string specifying which brute force option to use
to speed up the calculation of competition coefficients. Defaults to "none".
Other options are "omp", for multithreading with OpenMP, "simd" for single
instruction, multiple data (SIMD) via the C++ library
\href{https://github.com/xtensor-stack/xsimd}{\code{xsimd}}; and "simd_omp" for both.}
}
\description{
Fitness values are computed for each individual from their trait value,
the fitness landscape defined by the carrying capacity parameters, and the
trait values of all other individuals in the community.
}
\author{
Theo Pannetier
}
